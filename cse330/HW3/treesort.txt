//Class: CSE330
//Term: Spring 2014
//Instructor: George M. Georgiou
//Name: Seth Lemanek
//Homwwork 3
//Title: TreeSort

#include<vector>
#include<set>
#include<stdlib.h>
#include<iostream>
#include<time.h>

using namespace std;

template <class T>
void treesort (vector<T> & v)
{
    multiset<T> s;
    int i = 0;
    typename vector<T>::iterator it;
    for(it = v.begin(); it != v.end(); ++it)
	s.insert(*it);//fill set with values from the vector
    for(typename multiset<T>::iterator sit = s.begin(); sit != s.end(); ++sit)
    {
	v[i] = *sit;//return values to vector in order by the set
	i++;
    }
}//treesort utilizes the set (multiset for simluar values) for its organizing structure to organize a vector of numbers
void print (vector<int> v)//prints out data of a vector of integers
{ 
    for(int i = 0; i < v.size(); i++)
	cout << v[i] << " ";
    cout << endl;
}
int main()
{
    int size = 0;
    cout << "Enter size of the vector. \n";
    cin >> size;
    vector<int> myvec (size);//create vector of size ten
    srand(time(0));//create random seed

    for(vector<int>::iterator it = myvec.begin(); it != myvec.end(); ++it)
    {
	*it = rand() % 21;//fill vector with random integers
    }
    print(myvec);
    treesort(myvec);//use treesort to organize vector
    print(myvec);
    return 0;//end program with zero errors
}


//Problem 2: Complexity of the Set operation
//As mentioned in the beginning of Chapter 12 of Data Structures in C++, the operations of a set can range from
//O(log(n)) steps to in worst case O(n).  Balancing trees of the set is key to make trees tranversal take O(log(n))
//steps.  But the act of balancing trees is more complex with O(n) steps.
Script started on Wed 04 Jun 2014 11:41:54 AM PDT
]0;004470530@jb358-22:/students/csci/004470530/cse330/HW3[?1034h[004470530@jb358-22 HW3]$ ./a.out
Enter size of the vector. 
10
18 13 11 19 1 18 17 15 14 17 
1 11 13 14 15 17 17 18 18 19 
]0;004470530@jb358-22:/students/csci/004470530/cse330/HW3[004470530@jb358-22 HW3]$ ./aout[K[K[K.out
Enter size of the vector. 
5
8 18 14 6 11 
6 8 11 14 18 
]0;004470530@jb358-22:/students/csci/004470530/cse330/HW3[004470530@jb358-22 HW3]$ ./aout[K[K[K.out
Enter size of the vector. 
100
4 5 8 6 10 15 16 3 13 9 17 6 6 19 11 9 16 16 19 16 12 13 6 18 12 1 4 6 8 12 0 10 16 8 16 5 2 9 6 13 18 2 20 1 20 8 8 15 1 7 8 13 20 15 8 10 14 12 16 1 4 14 11 20 1 5 2 1 14 6 15 10 7 12 9 6 20 18 19 19 2 4 12 1 17 20 9 10 10 2 9 12 16 19 11 17 1 11 19 13 
0 1 1 1 1 1 1 1 1 2 2 2 2 2 3 4 4 4 4 5 5 5 6 6 6 6 6 6 6 6 7 7 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 12 12 12 12 12 12 12 13 13 13 13 13 14 14 14 15 15 15 15 16 16 16 16 16 16 16 16 17 17 17 18 18 18 19 19 19 19 19 19 20 20 20 20 20 20 
]0;004470530@jb358-22:/students/csci/004470530/cse330/HW3[004470530@jb358-22 HW3]$ ./a.out
Enter size of the vector. 
200 
1 0 4 7 9 1 16 8 19 19 3 14 7 2 3 8 3 11 16 16 
0 1 1 2 3 3 3 4 7 7 8 8 9 11 14 16 16 16 19 19 
]0;004470530@jb358-22:/students/csci/004470530/cse330/HW3[004470530@jb358-22 HW3]$ exit
exit

Script done on Wed 04 Jun 2014 11:43:03 AM PDT
